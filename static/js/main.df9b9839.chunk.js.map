{"version":3,"sources":["components/scripts.js","components/ButtonBar.js","components/CanvasBackground.js","components/Title.js","App.js","serviceWorker.js","index.js"],"names":["array","module","exports","e","canvas","ctx","getContext","clearRect","width","height","globalCompositeOperation","push","x","clientX","y","clientY","length","shift","forEach","item","i","beginPath","arc","Math","PI","stroke","rect","fill","resetSquare","floor","random","window","innerWidth","innerHeight","font","fillText","closePath","fillStyle","ButtonBar","toggleActive","target","targeted","refs","title","Object","keys","filter","ref","element","classList","toggle","childNodes","state","active","page","className","key","onClick","info","id","Pages","map","formatButton","React","Component","CanvasBackground","updateDimensions","canvasRef","script","scripts","this","addEventListener","removeEventListener","style","border","onMouseMove","currentGame","Title","App","loaded","setState","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df9b9839.chunk.js","sourcesContent":["let array=[]\nfunction circleFunction(e, canvas) {\n\n  let ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0,0,canvas.width, canvas.height)\n  ctx.globalCompositeOperation = 'xor';\n  array.push({x:e.clientX,y:e.clientY})\n\n  if (array.length > 100) {\n    array.shift()\n  }\n\n  array.forEach((item, i) => {\n    ctx.beginPath();\n    ctx.arc(item.x, item.y, 50, 0, 2 * Math.PI);\n    ctx.stroke();\n  });\n\n}\n\nfunction squareFunction(e, canvas) {\n  let ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0,0,canvas.width, canvas.height)\n  ctx.globalCompositeOperation = 'xor';\n  array.push({x:e.clientX,y:e.clientY})\n\n  if (array.length > 100) {\n    array.shift()\n  }\n\n  array.forEach((item, i) => {\n    ctx.beginPath();\n    ctx.rect(item.x-25, item.y-25, 50, 50);\n    ctx.fill();\n  });\n\n}\n\nfunction circleSquare(e, canvas) {\n  let ctx = canvas.getContext(\"2d\");\n  ctx.globalCompositeOperation = 'xor';\n\n  ctx.clearRect(0,0,canvas.width, canvas.height)\n\n  function resetSquare() {\n    array[0]={\n      x: Math.floor(Math.random() * window.innerWidth-10) + 10,\n      y: Math.floor(Math.random() * window.innerHeight-10) + 10\n    }\n\n    array[2]=array[2]?array[2]+1:1\n\n  }\n\n  if (array.length === 0){\n    resetSquare()\n  }\n  if (e.clientY+50 >= array[0].y-25){\n    if (e.clientY-50 <= array[0].y+25){\n      if (e.clientX+50 >= array[0].x-25){\n        if (e.clientX-50 <= array[0].x+25){\n          resetSquare()\n        }\n      }\n    }\n  }\n\n  ctx.beginPath();\n  ctx.font = \"30px Arial\";\n  ctx.fillText(array[2], canvas.width/2, canvas.height/3);\n  ctx.closePath()\n  ctx.beginPath();\n  ctx.fillStyle='black'\n  ctx.arc(e.clientX, e.clientY, 50, 0, 360);\n  ctx.fill();\n  ctx.closePath()\n  ctx.beginPath();\n  ctx.fillStyle='red'\n  ctx.rect(array[0].x, array[0].y, 50, 50);\n  ctx.fill();\n  ctx.closePath()\n}\n\nmodule.exports = [\n  circleFunction,\n  squareFunction,\n  circleSquare,\n];\n","import React from 'react';\nimport Pages from './pages.json'\n// import ButtonBoi from './ButtonBoi.js'\n\nclass ButtonBar extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      active: false\n    }\n  }\n\n  toggleActive = (target) => {\n    let targeted = this.refs[target.title];\n    let notTargetted = Object.keys(this.refs).filter(ref => ref !== target.title)\n\n    notTargetted.forEach((element, i) => {\n      this.refs[element].classList.toggle('hide')\n    });\n    targeted.childNodes[1].classList.toggle('showP')\n  }\n\n  formatButton(page){\n    return (<div\n      className='pageItem'\n      key={page.title}\n      ref={page.title}\n      ><button\n      onClick={()=>this.toggleActive(page)}\n      >{page.title}\n      </button>\n      <p>{page.info}</p>\n      </div>)\n    }\n\n    render(){\n      return (\n        <div\n        id='pageElems'\n        >\n        {Pages.map(page=>{\n          return this.formatButton(page)\n        })}</div>\n      )}\n    }\n    export default ButtonBar;\n","import React from 'react';\nimport scripts from './scripts.js'\n\nclass CanvasBackground extends React.Component {\n  constructor(){\n    super()\n    this.state={\n      script: scripts[Math.floor(Math.random() * scripts.length)]\n    }\n  }\n\n  updateDimensions = () => {\n    this.refs.canvasRef.width = window.innerWidth\n    this.refs.canvasRef.height = window.innerHeight\n  };\n\n  componentDidMount() {\n    this.updateDimensions()\n    window.addEventListener('resize', this.updateDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateDimensions);\n  }\n\n  currentGame(e, canvas){\n    this.state.script(e, canvas)\n  }\n\n  render(){\n    return (\n      <canvas\n      ref='canvasRef'\n      style={{border:'1px solid black'}}\n      onMouseMove={(e)=>this.currentGame(e, this.refs.canvasRef)}\n      >\n      </canvas>\n    );\n  }\n}\nexport default CanvasBackground;\n","import React from 'react';\n\nclass Title extends React.Component {\n  render(){\n    return (\n      <div>\n      <h1 id='title'>Tom Russell Portfolio</h1>\n      </div>\n    );\n  }\n}\nexport default Title;\n","import React from 'react';\nimport ButtonBar from './components/ButtonBar.js'\nimport CanvasBackground from './components/CanvasBackground.js'\nimport Title from './components/Title.js'\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      loaded: false\n    }\n  }\n\n  componentDidUpdate(){\n    this.setState({\n      loaded: true\n    })\n  }\n\n  render(){\n    // let result;\n    // if (!this.state.loaded) {\n      //   // result = (<Loader/>)\n      // }\n      return (\n        <div>\n        <CanvasBackground/>\n        <Title/>\n        <ButtonBar/>\n        </div>\n      )\n    }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}