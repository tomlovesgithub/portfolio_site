{"version":3,"sources":["components/scripts.js","components/ButtonBar.js","components/CanvasBackground.js","App.js","serviceWorker.js","index.js"],"names":["array","module","exports","e","canvas","ctx","getContext","clearRect","width","height","globalCompositeOperation","push","x","clientX","y","clientY","length","shift","forEach","item","i","beginPath","arc","Math","PI","stroke","rect","fill","ButtonBar","toggleActive","target","state","active","setState","page","key","title","onClick","this","id","info","Pages","map","formatButton","React","Component","CanvasBackground","updateDimensions","refs","canvasRef","window","innerWidth","innerHeight","script","scripts","floor","random","addEventListener","removeEventListener","ref","style","border","onMouseMove","currentGame","App","loaded","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cffb6cdc.chunk.js","sourcesContent":["let array=[]\nfunction circleFunction(e, canvas) {\n\n\n  let ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0,0,canvas.width, canvas.height)\n  ctx.globalCompositeOperation = 'xor';\n  array.push({x:e.clientX,y:e.clientY})\n\n  if (array.length > 100) {\n    array.shift()\n  }\n\n  array.forEach((item, i) => {\n    ctx.beginPath();\n    ctx.arc(item.x, item.y, 50, 0, 2 * Math.PI);\n    ctx.stroke();\n  });\n\n}\n\nfunction squareFunction(e, canvas) {\n  let ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0,0,canvas.width, canvas.height)\n  ctx.globalCompositeOperation = 'xor';\n  array.push({x:e.clientX,y:e.clientY})\n\n  if (array.length > 500) {\n    array.shift()\n  }\n\n  array.forEach((item, i) => {\n    ctx.beginPath();\n    ctx.rect(item.x-25, item.y-25, 50, 50);\n    ctx.fill();\n  });\n\n}\n\n    module.exports = [\n      circleFunction,\n      squareFunction,\n      // circleSquare,\n      // blockPage\n    ];\n","import React from 'react';\nimport Pages from './pages.json'\n// import ButtonBoi from './ButtonBoi.js'\n\nclass ButtonBar extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      active: false\n    }\n  }\n\n  toggleActive = (target) => {\n    if (this.state.active === target) {\n      this.setState({\n        active: false\n      })\n    } else {\n      this.setState({\n        active: target\n      })\n    }\n  }\n\n  formatButton(page){\n    return (<button\n      key={page.title}\n      onClick={()=>this.toggleActive(page)}\n      >\n      {page.title}\n      </button>)\n    }\n\n    render(){\n      if (!this.state.active) {\n        return (\n          <ul id='buttonsBar'>\n          {Pages.map(page=>{\n            return this.formatButton(page)\n          })}\n          </ul>\n        );\n      } else {\n        return (<div id='buttonsBar'>\n          <button\n          onClick={()=>this.toggleActive(this.state.active)}\n          >back</button>\n          {this.state.active.title}\n          <p>{this.state.active.info}</p>\n          </div>)\n        }\n      }\n    }\n    export default ButtonBar;\n","import React from 'react';\nimport scripts from './scripts.js'\n\nclass CanvasBackground extends React.Component {\n  constructor(){\n    super()\n    this.state={\n      script: scripts[Math.floor(Math.random() * scripts.length)]\n    }\n  }\n\n  updateDimensions = () => {\n    this.refs.canvasRef.width = window.innerWidth\n    this.refs.canvasRef.height = window.innerHeight\n  };\n\n  componentDidMount() {\n    this.updateDimensions()\n    window.addEventListener('resize', this.updateDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateDimensions);\n  }\n\n  currentGame(e, canvas){\n    this.state.script(e, canvas)\n  }\n\n  render(){\n    return (\n      <canvas\n      ref='canvasRef'\n      style={{border:'1px solid black'}}\n      onMouseMove={(e)=>this.currentGame(e, this.refs.canvasRef)}\n      >\n      </canvas>\n    );\n  }\n}\nexport default CanvasBackground;\n","import React from 'react';\nimport ButtonBar from './components/ButtonBar.js'\nimport CanvasBackground from './components/CanvasBackground.js'\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      loaded: false\n    }\n  }\n\n  componentDidUpdate(){\n    this.setState({\n      loaded: true\n    })\n  }\n\n  render(){\n    // let result;\n    // if (!this.state.loaded) {\n    //   // result = (<Loader/>)\n    // }\n    return (\n      <div>\n      <CanvasBackground/>\n      <ButtonBar/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}